# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc 621b28a0003170be9222da23c41c090ec5e74a300b151cd6975afe99a0695d6e # shrinks to spec = Spec(Primitive(PrimitiveBasics { typ: Conv { accum: true }, spec_shape: [1, 4, 3, 14, 4, 14, 4], dtype: Uint32 }, [TensorSpecAux { contig: 0, aligned: false, level: L1, layout: Standard { dim_order: [0, 1, 2, 3] }, vector_size: None }, TensorSpecAux { contig: 0, aligned: false, level: L1, layout: Packed { dim_count: 4, strip_dim: 0, strip_size: 2 }, vector_size: None }, TensorSpecAux { contig: 0, aligned: false, level: L1, layout: Standard { dim_order: [0, 1, 2, 3] }, vector_size: None }], false), Standard(MemVec([64, 1024, 32768, 1073741824])))
cc d5426c7bbcebdcc94c7ac335e850051746c583d940c99fee06766bd804c98a59 # shrinks to spec = Spec(Primitive(PrimitiveBasics { typ: Move, spec_shape: [3, 5, 3], dtype: Uint8 }, [TensorSpecAux { contig: 3, aligned: true, level: GL, layout: Standard { dim_order: [0, 1, 2] }, vector_size: None }, TensorSpecAux { contig: 2, aligned: true, level: GL, layout: Packed { dim_count: 3, strip_dim: 1, strip_size: 4 }, vector_size: None }], false), Standard(MemVec([5, 4, 5, 19])))
